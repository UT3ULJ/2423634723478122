
timer indikator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001643  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e4  00000000  00000000  00001917  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a31  00000000  00000000  00001ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b9  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001132  00000000  00000000  00003139  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000426b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	10 d0       	rcall	.+32     	; 0x64 <main>
  44:	6d c0       	rjmp	.+218    	; 0x120 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <timer_ini>:
//-----------------------------------------//

void timer_ini(void) 
	{
	
	TCCR1B |= (1<<WGM12);        // Установка режима СТС - сброс по совпадению
  48:	8e b5       	in	r24, 0x2e	; 46
  4a:	88 60       	ori	r24, 0x08	; 8
  4c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);          // Установка бита прерывания 1 счетчика по свопадению с OCR1A (H L)
  4e:	89 b7       	in	r24, 0x39	; 57
  50:	80 61       	ori	r24, 0x10	; 16
  52:	89 bf       	out	0x39, r24	; 57
	//0000111101000010
	//111001001101111000
	OCR1AH = 0b01111010;       // - старшие биты - Записываем число для сравнения 16 бит + нижняя строчка
  54:	8a e7       	ldi	r24, 0x7A	; 122
  56:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00010010;       // - младшие биты - F_CPU/256=3906 , в бинарном формате - 00001111-01000010    11110100 0010010        01111010 00010010
  58:	82 e1       	ldi	r24, 0x12	; 18
  5a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS10);              //  Устанавливаем делитель 256    - 1 000 000 / 3906 = 256
  5c:	8e b5       	in	r24, 0x2e	; 46
  5e:	81 60       	ori	r24, 0x01	; 1
  60:	8e bd       	out	0x2e, r24	; 46
  62:	08 95       	ret

00000064 <main>:
//-----------------------------------------//

int main(void)
{
	
	timer_ini(); 
  64:	f1 df       	rcall	.-30     	; 0x48 <timer_ini>
// 	_delay_us(15);
// 	ds3231_init();
// 	_delay_us(15);
	
	DDRD=0xFF;
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	81 bb       	out	0x11, r24	; 17
	DDRB=0b00001111;
  6a:	8f e0       	ldi	r24, 0x0F	; 15
  6c:	87 bb       	out	0x17, r24	; 23
	DDRC=0b00011111;
  6e:	9f e1       	ldi	r25, 0x1F	; 31
  70:	94 bb       	out	0x14, r25	; 20
	PORTD=0b00000000;
  72:	12 ba       	out	0x12, r1	; 18
	PORTB=0b00001111;
  74:	88 bb       	out	0x18, r24	; 24
	PORTC=0b00001111;
  76:	85 bb       	out	0x15, r24	; 21
	sei();
  78:	78 94       	sei
		
/*		for (i=0;i<5;i++)*/
		{

/*			_delay_ms(1000);*/
			if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB|=(1<<PORTB1); PORTD=One;}
  7a:	91 e0       	ldi	r25, 0x01	; 1
			if (n_count==1) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB1);PORTB|=(1<<PORTB0); PORTD=Two;}
  7c:	62 e0       	ldi	r22, 0x02	; 2
			if (n_count==2) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC3); PORTD=Three;}
  7e:	53 e0       	ldi	r21, 0x03	; 3
			if (n_count==3)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC2); PORTD=Five;}
  80:	45 e0       	ldi	r20, 0x05	; 5
			if (n_count==4)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC1); PORTD=Six;}
  82:	36 e0       	ldi	r19, 0x06	; 6
			if (n_count==5)	{PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC0); PORTD=Seven;}
  84:	27 e0       	ldi	r18, 0x07	; 7
		
/*		for (i=0;i<5;i++)*/
		{

/*			_delay_ms(1000);*/
			if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB|=(1<<PORTB1); PORTD=One;}
  86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8a:	81 11       	cpse	r24, r1
  8c:	07 c0       	rjmp	.+14     	; 0x9c <main+0x38>
  8e:	a8 98       	cbi	0x15, 0	; 21
  90:	a9 98       	cbi	0x15, 1	; 21
  92:	aa 98       	cbi	0x15, 2	; 21
  94:	ab 98       	cbi	0x15, 3	; 21
  96:	c0 98       	cbi	0x18, 0	; 24
  98:	c1 9a       	sbi	0x18, 1	; 24
  9a:	92 bb       	out	0x12, r25	; 18
			if (n_count==1) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB1);PORTB|=(1<<PORTB0); PORTD=Two;}
  9c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	39 f4       	brne	.+14     	; 0xb2 <main+0x4e>
  a4:	a8 98       	cbi	0x15, 0	; 21
  a6:	a9 98       	cbi	0x15, 1	; 21
  a8:	aa 98       	cbi	0x15, 2	; 21
  aa:	ab 98       	cbi	0x15, 3	; 21
  ac:	c1 98       	cbi	0x18, 1	; 24
  ae:	c0 9a       	sbi	0x18, 0	; 24
  b0:	62 bb       	out	0x12, r22	; 18
			if (n_count==2) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC3); PORTD=Three;}
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	39 f4       	brne	.+14     	; 0xc8 <main+0x64>
  ba:	a8 98       	cbi	0x15, 0	; 21
  bc:	a9 98       	cbi	0x15, 1	; 21
  be:	aa 98       	cbi	0x15, 2	; 21
  c0:	c0 98       	cbi	0x18, 0	; 24
  c2:	c1 98       	cbi	0x18, 1	; 24
  c4:	ab 9a       	sbi	0x15, 3	; 21
  c6:	52 bb       	out	0x12, r21	; 18
			if (n_count==3)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC2); PORTD=Five;}
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	39 f4       	brne	.+14     	; 0xde <main+0x7a>
  d0:	a8 98       	cbi	0x15, 0	; 21
  d2:	a9 98       	cbi	0x15, 1	; 21
  d4:	ab 98       	cbi	0x15, 3	; 21
  d6:	c0 98       	cbi	0x18, 0	; 24
  d8:	c1 98       	cbi	0x18, 1	; 24
  da:	aa 9a       	sbi	0x15, 2	; 21
  dc:	42 bb       	out	0x12, r20	; 18
			if (n_count==4)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC1); PORTD=Six;}
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	39 f4       	brne	.+14     	; 0xf4 <main+0x90>
  e6:	a8 98       	cbi	0x15, 0	; 21
  e8:	aa 98       	cbi	0x15, 2	; 21
  ea:	ab 98       	cbi	0x15, 3	; 21
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	c1 98       	cbi	0x18, 1	; 24
  f0:	a9 9a       	sbi	0x15, 1	; 21
  f2:	32 bb       	out	0x12, r19	; 18
			if (n_count==5)	{PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC0); PORTD=Seven;}
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	39 f4       	brne	.+14     	; 0x10a <main+0xa6>
  fc:	a9 98       	cbi	0x15, 1	; 21
  fe:	aa 98       	cbi	0x15, 2	; 21
 100:	ab 98       	cbi	0x15, 3	; 21
 102:	c0 98       	cbi	0x18, 0	; 24
 104:	c1 98       	cbi	0x18, 1	; 24
 106:	a8 9a       	sbi	0x15, 0	; 21
 108:	22 bb       	out	0x12, r18	; 18
			n_count++;
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			if (n_count>5) n_count=0;
 114:	86 30       	cpi	r24, 0x06	; 6
 116:	08 f4       	brcc	.+2      	; 0x11a <main+0xb6>
 118:	b6 cf       	rjmp	.-148    	; 0x86 <main+0x22>
 11a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 11e:	b3 cf       	rjmp	.-154    	; 0x86 <main+0x22>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
