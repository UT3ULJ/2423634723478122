
timer indikator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070a  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b4  00000000  00000000  00000c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000393  00000000  00000000  00001216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000015ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000234  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__vector_6>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	2d c0       	rjmp	.+90     	; 0x82 <segchar+0x10>
  28:	2e c0       	rjmp	.+92     	; 0x86 <segchar+0x14>
  2a:	30 c0       	rjmp	.+96     	; 0x8c <segchar+0x1a>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <segchar+0x20>
  2e:	34 c0       	rjmp	.+104    	; 0x98 <segchar+0x26>
  30:	36 c0       	rjmp	.+108    	; 0x9e <segchar+0x2c>
  32:	38 c0       	rjmp	.+112    	; 0xa4 <segchar+0x32>
  34:	3a c0       	rjmp	.+116    	; 0xaa <segchar+0x38>
  36:	3c c0       	rjmp	.+120    	; 0xb0 <segchar+0x3e>
  38:	3e c0       	rjmp	.+124    	; 0xb6 <segchar+0x44>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	e6 e1       	ldi	r30, 0x16	; 22
  4e:	f4 e0       	ldi	r31, 0x04	; 4
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a2 36       	cpi	r26, 0x62	; 98
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a2 e6       	ldi	r26, 0x62	; 98
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	aa 36       	cpi	r26, 0x6A	; 106
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	5d d1       	rcall	.+698    	; 0x328 <main>
  6e:	d1 c1       	rjmp	.+930    	; 0x412 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <segchar>:
unsigned char R1=0, R2=0, R3=0, R4=0, R5=0, R6=0;
//-----------------------------------------//

void segchar (unsigned char seg)
{
	switch(seg)
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	8a 30       	cpi	r24, 0x0A	; 10
  76:	91 05       	cpc	r25, r1
  78:	00 f5       	brcc	.+64     	; 0xba <segchar+0x48>
  7a:	fc 01       	movw	r30, r24
  7c:	ed 5e       	subi	r30, 0xED	; 237
  7e:	ff 4f       	sbci	r31, 0xFF	; 255
  80:	09 94       	ijmp
	{
		
		case 0: PORTD = Zero; break;
  82:	12 ba       	out	0x12, r1	; 18
  84:	08 95       	ret
		case 1: PORTD = One; break;
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret
		case 2: PORTD = Two; break;
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret
		case 3: PORTD = Three; break;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	82 bb       	out	0x12, r24	; 18
  96:	08 95       	ret
		case 4: PORTD = Four; break;
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret
		case 5: PORTD = Five; break;
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret
		case 6: PORTD = Six; break;
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret
		case 7: PORTD = Seven; break;
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret
		case 8: PORTD = Eight; break;
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret
		case 9: PORTD = Nine; break;
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	08 95       	ret

000000bc <timer_ini>:
//-----------------------------------------//

void timer_ini(void) 
	{
	
	TCCR1B |= (1<<WGM12);        // Установка режима СТС - сброс по совпадению
  bc:	8e b5       	in	r24, 0x2e	; 46
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);          // Установка бита прерывания 1 счетчика по свопадению с OCR1A (H L)
  c2:	89 b7       	in	r24, 0x39	; 57
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	89 bf       	out	0x39, r24	; 57
	//0000111101000010
	//111001001101111000
	OCR1AH = 0b00001111;       // - старшие биты - Записываем число для сравнения 16 бит + нижняя строчка
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b01000010;       // - младшие биты - F_CPU/256=3906 , в бинарном формате - 00001111-01000010    11110100 0010010
  cc:	82 e4       	ldi	r24, 0x42	; 66
  ce:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS10);              //  Устанавливаем делитель 256    - 1 000 000 / 3906 = 256
  d0:	8e b5       	in	r24, 0x2e	; 46
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8e bd       	out	0x2e, r24	; 46
  d6:	08 95       	ret

000000d8 <__vector_6>:


//-----------------------------------------//

ISR (TIMER1_COMPA_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB|=(1<<PORTB1); segchar(R1);}
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  fe:	81 11       	cpse	r24, r1
 100:	16 c0       	rjmp	.+44     	; 0x12e <__vector_6+0x56>
 102:	a8 98       	cbi	0x15, 0	; 21
 104:	a9 98       	cbi	0x15, 1	; 21
 106:	aa 98       	cbi	0x15, 2	; 21
 108:	ab 98       	cbi	0x15, 3	; 21
 10a:	c0 98       	cbi	0x18, 0	; 24
 10c:	c1 9a       	sbi	0x18, 1	; 24
 10e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <R1>
 112:	af df       	rcall	.-162    	; 0x72 <segchar>
	if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB1);PORTB|=(1<<PORTB0); segchar(R2);}
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 118:	81 11       	cpse	r24, r1
 11a:	09 c0       	rjmp	.+18     	; 0x12e <__vector_6+0x56>
 11c:	a8 98       	cbi	0x15, 0	; 21
 11e:	a9 98       	cbi	0x15, 1	; 21
 120:	aa 98       	cbi	0x15, 2	; 21
 122:	ab 98       	cbi	0x15, 3	; 21
 124:	c1 98       	cbi	0x18, 1	; 24
 126:	c0 9a       	sbi	0x18, 0	; 24
 128:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <R2>
 12c:	a2 df       	rcall	.-188    	; 0x72 <segchar>
	if (n_count==1) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC3); segchar(R3);}
 12e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	49 f4       	brne	.+18     	; 0x148 <__vector_6+0x70>
 136:	a8 98       	cbi	0x15, 0	; 21
 138:	a9 98       	cbi	0x15, 1	; 21
 13a:	aa 98       	cbi	0x15, 2	; 21
 13c:	c0 98       	cbi	0x18, 0	; 24
 13e:	c1 98       	cbi	0x18, 1	; 24
 140:	ab 9a       	sbi	0x15, 3	; 21
 142:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <R3>
 146:	95 df       	rcall	.-214    	; 0x72 <segchar>
	if (n_count==2)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC2); segchar(R4);}
 148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	49 f4       	brne	.+18     	; 0x162 <__vector_6+0x8a>
 150:	a8 98       	cbi	0x15, 0	; 21
 152:	a9 98       	cbi	0x15, 1	; 21
 154:	ab 98       	cbi	0x15, 3	; 21
 156:	c0 98       	cbi	0x18, 0	; 24
 158:	c1 98       	cbi	0x18, 1	; 24
 15a:	aa 9a       	sbi	0x15, 2	; 21
 15c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <R4>
 160:	88 df       	rcall	.-240    	; 0x72 <segchar>
	if (n_count==3)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC1); segchar(R5);}
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	49 f4       	brne	.+18     	; 0x17c <__vector_6+0xa4>
 16a:	a8 98       	cbi	0x15, 0	; 21
 16c:	aa 98       	cbi	0x15, 2	; 21
 16e:	ab 98       	cbi	0x15, 3	; 21
 170:	c0 98       	cbi	0x18, 0	; 24
 172:	c1 98       	cbi	0x18, 1	; 24
 174:	a9 9a       	sbi	0x15, 1	; 21
 176:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <R5>
 17a:	7b df       	rcall	.-266    	; 0x72 <segchar>
	if (n_count==4)	{PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC0); segchar(R6);}
 17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	49 f4       	brne	.+18     	; 0x196 <__vector_6+0xbe>
 184:	a9 98       	cbi	0x15, 1	; 21
 186:	aa 98       	cbi	0x15, 2	; 21
 188:	ab 98       	cbi	0x15, 3	; 21
 18a:	c0 98       	cbi	0x18, 0	; 24
 18c:	c1 98       	cbi	0x18, 1	; 24
 18e:	a8 9a       	sbi	0x15, 0	; 21
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 194:	6e df       	rcall	.-292    	; 0x72 <segchar>
	n_count++;
 196:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 19a:	8f 5f       	subi	r24, 0xFF	; 255
	if (n_count>5) n_count=0;
 19c:	86 30       	cpi	r24, 0x06	; 6
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <__vector_6+0xce>
	if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB1);PORTB|=(1<<PORTB0); segchar(R2);}
	if (n_count==1) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC3); segchar(R3);}
	if (n_count==2)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC2); segchar(R4);}
	if (n_count==3)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC1); segchar(R5);}
	if (n_count==4)	{PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC0); segchar(R6);}
	n_count++;
 1a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__vector_6+0xd2>
	if (n_count>5) n_count=0;
 1a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
	
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <ledprint>:


void ledprint(unsigned int number)
{
 1cc:	ac 01       	movw	r20, r24
	R1 = number%10;
 1ce:	9c 01       	movw	r18, r24
 1d0:	ad ec       	ldi	r26, 0xCD	; 205
 1d2:	bc ec       	ldi	r27, 0xCC	; 204
 1d4:	f0 d0       	rcall	.+480    	; 0x3b6 <__umulhisi3>
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	9c 01       	movw	r18, r24
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	9a 01       	movw	r18, r20
 1fa:	28 1b       	sub	r18, r24
 1fc:	39 0b       	sbc	r19, r25
 1fe:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <R1>
	R2 = number%100/10;
 202:	9a 01       	movw	r18, r20
 204:	36 95       	lsr	r19
 206:	27 95       	ror	r18
 208:	36 95       	lsr	r19
 20a:	27 95       	ror	r18
 20c:	ab e7       	ldi	r26, 0x7B	; 123
 20e:	b4 e1       	ldi	r27, 0x14	; 20
 210:	d2 d0       	rcall	.+420    	; 0x3b6 <__umulhisi3>
 212:	96 95       	lsr	r25
 214:	87 95       	ror	r24
 216:	64 e6       	ldi	r22, 0x64	; 100
 218:	68 9f       	mul	r22, r24
 21a:	90 01       	movw	r18, r0
 21c:	69 9f       	mul	r22, r25
 21e:	30 0d       	add	r19, r0
 220:	11 24       	eor	r1, r1
 222:	ca 01       	movw	r24, r20
 224:	82 1b       	sub	r24, r18
 226:	93 0b       	sbc	r25, r19
 228:	9c 01       	movw	r18, r24
 22a:	ad ec       	ldi	r26, 0xCD	; 205
 22c:	bc ec       	ldi	r27, 0xCC	; 204
 22e:	c3 d0       	rcall	.+390    	; 0x3b6 <__umulhisi3>
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <R2>
	R3 = number%1000/100;
 240:	9a 01       	movw	r18, r20
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	a5 ec       	ldi	r26, 0xC5	; 197
 250:	b0 e2       	ldi	r27, 0x20	; 32
 252:	b1 d0       	rcall	.+354    	; 0x3b6 <__umulhisi3>
 254:	92 95       	swap	r25
 256:	82 95       	swap	r24
 258:	8f 70       	andi	r24, 0x0F	; 15
 25a:	89 27       	eor	r24, r25
 25c:	9f 70       	andi	r25, 0x0F	; 15
 25e:	89 27       	eor	r24, r25
 260:	68 ee       	ldi	r22, 0xE8	; 232
 262:	73 e0       	ldi	r23, 0x03	; 3
 264:	86 9f       	mul	r24, r22
 266:	90 01       	movw	r18, r0
 268:	87 9f       	mul	r24, r23
 26a:	30 0d       	add	r19, r0
 26c:	96 9f       	mul	r25, r22
 26e:	30 0d       	add	r19, r0
 270:	11 24       	eor	r1, r1
 272:	ca 01       	movw	r24, r20
 274:	82 1b       	sub	r24, r18
 276:	93 0b       	sbc	r25, r19
 278:	9c 01       	movw	r18, r24
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	ab e7       	ldi	r26, 0x7B	; 123
 284:	b4 e1       	ldi	r27, 0x14	; 20
 286:	97 d0       	rcall	.+302    	; 0x3b6 <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <R3>
	R4 = number%10000/1000;
 290:	9a 01       	movw	r18, r20
 292:	32 95       	swap	r19
 294:	22 95       	swap	r18
 296:	2f 70       	andi	r18, 0x0F	; 15
 298:	23 27       	eor	r18, r19
 29a:	3f 70       	andi	r19, 0x0F	; 15
 29c:	23 27       	eor	r18, r19
 29e:	a7 e4       	ldi	r26, 0x47	; 71
 2a0:	b3 e0       	ldi	r27, 0x03	; 3
 2a2:	89 d0       	rcall	.+274    	; 0x3b6 <__umulhisi3>
 2a4:	fc 01       	movw	r30, r24
 2a6:	f6 95       	lsr	r31
 2a8:	e7 95       	ror	r30
 2aa:	f6 95       	lsr	r31
 2ac:	e7 95       	ror	r30
 2ae:	f6 95       	lsr	r31
 2b0:	e7 95       	ror	r30
 2b2:	20 e1       	ldi	r18, 0x10	; 16
 2b4:	37 e2       	ldi	r19, 0x27	; 39
 2b6:	e2 9f       	mul	r30, r18
 2b8:	c0 01       	movw	r24, r0
 2ba:	e3 9f       	mul	r30, r19
 2bc:	90 0d       	add	r25, r0
 2be:	f2 9f       	mul	r31, r18
 2c0:	90 0d       	add	r25, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	fa 01       	movw	r30, r20
 2c6:	e8 1b       	sub	r30, r24
 2c8:	f9 0b       	sbc	r31, r25
 2ca:	9f 01       	movw	r18, r30
 2cc:	36 95       	lsr	r19
 2ce:	27 95       	ror	r18
 2d0:	36 95       	lsr	r19
 2d2:	27 95       	ror	r18
 2d4:	36 95       	lsr	r19
 2d6:	27 95       	ror	r18
 2d8:	a5 ec       	ldi	r26, 0xC5	; 197
 2da:	b0 e2       	ldi	r27, 0x20	; 32
 2dc:	6c d0       	rcall	.+216    	; 0x3b6 <__umulhisi3>
 2de:	92 95       	swap	r25
 2e0:	82 95       	swap	r24
 2e2:	8f 70       	andi	r24, 0x0F	; 15
 2e4:	89 27       	eor	r24, r25
 2e6:	9f 70       	andi	r25, 0x0F	; 15
 2e8:	89 27       	eor	r24, r25
 2ea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <R4>
	R5 = number%10000/10000;
 2ee:	9f 01       	movw	r18, r30
 2f0:	32 95       	swap	r19
 2f2:	22 95       	swap	r18
 2f4:	2f 70       	andi	r18, 0x0F	; 15
 2f6:	23 27       	eor	r18, r19
 2f8:	3f 70       	andi	r19, 0x0F	; 15
 2fa:	23 27       	eor	r18, r19
 2fc:	a7 e4       	ldi	r26, 0x47	; 71
 2fe:	b3 e0       	ldi	r27, 0x03	; 3
 300:	5a d0       	rcall	.+180    	; 0x3b6 <__umulhisi3>
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <R5>
	R6 = number/100000;
 312:	ba 01       	movw	r22, r20
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	20 ea       	ldi	r18, 0xA0	; 160
 31a:	36 e8       	ldi	r19, 0x86	; 134
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	2e d0       	rcall	.+92     	; 0x37e <__divmodsi4>
 322:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
 326:	08 95       	ret

00000328 <main>:
{

	
	unsigned char buttondeb=0, butstatus=0;
	
	timer_ini(); 
 328:	c9 de       	rcall	.-622    	; 0xbc <timer_ini>
	
	DDRD=0xFF;
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	81 bb       	out	0x11, r24	; 17
	DDRB=0b00001111;
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	87 bb       	out	0x17, r24	; 23
	DDRC=0b00011111;
 332:	9f e1       	ldi	r25, 0x1F	; 31
 334:	94 bb       	out	0x14, r25	; 20
	PORTD=0b00000000;
 336:	12 ba       	out	0x12, r1	; 18
	PORTB=0b00001111;
 338:	88 bb       	out	0x18, r24	; 24
	PORTC=0b00001111;
 33a:	85 bb       	out	0x15, r24	; 21
	i=0;
 33c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <i+0x1>
 340:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i>
	sei();
 344:	78 94       	sei
	
	while (1)
	{
		for (i=0;i<1000000;i++)
 346:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <i+0x1>
 34a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i>
		{
			ledprint(i);
 34e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <i>
 352:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <i+0x1>
 356:	3a df       	rcall	.-396    	; 0x1cc <ledprint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 358:	2f e3       	ldi	r18, 0x3F	; 63
 35a:	8d e0       	ldi	r24, 0x0D	; 13
 35c:	93 e0       	ldi	r25, 0x03	; 3
 35e:	21 50       	subi	r18, 0x01	; 1
 360:	80 40       	sbci	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <main+0x36>
 366:	00 c0       	rjmp	.+0      	; 0x368 <main+0x40>
 368:	00 00       	nop
	i=0;
	sei();
	
	while (1)
	{
		for (i=0;i<1000000;i++)
 36a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <i>
 36e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <i+0x1>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <i+0x1>
 378:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <i>
 37c:	e8 cf       	rjmp	.-48     	; 0x34e <main+0x26>

0000037e <__divmodsi4>:
 37e:	05 2e       	mov	r0, r21
 380:	97 fb       	bst	r25, 7
 382:	16 f4       	brtc	.+4      	; 0x388 <__divmodsi4+0xa>
 384:	00 94       	com	r0
 386:	0f d0       	rcall	.+30     	; 0x3a6 <__negsi2>
 388:	57 fd       	sbrc	r21, 7
 38a:	05 d0       	rcall	.+10     	; 0x396 <__divmodsi4_neg2>
 38c:	20 d0       	rcall	.+64     	; 0x3ce <__udivmodsi4>
 38e:	07 fc       	sbrc	r0, 7
 390:	02 d0       	rcall	.+4      	; 0x396 <__divmodsi4_neg2>
 392:	46 f4       	brtc	.+16     	; 0x3a4 <__divmodsi4_exit>
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <__negsi2>

00000396 <__divmodsi4_neg2>:
 396:	50 95       	com	r21
 398:	40 95       	com	r20
 39a:	30 95       	com	r19
 39c:	21 95       	neg	r18
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	4f 4f       	sbci	r20, 0xFF	; 255
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255

000003a4 <__divmodsi4_exit>:
 3a4:	08 95       	ret

000003a6 <__negsi2>:
 3a6:	90 95       	com	r25
 3a8:	80 95       	com	r24
 3aa:	70 95       	com	r23
 3ac:	61 95       	neg	r22
 3ae:	7f 4f       	sbci	r23, 0xFF	; 255
 3b0:	8f 4f       	sbci	r24, 0xFF	; 255
 3b2:	9f 4f       	sbci	r25, 0xFF	; 255
 3b4:	08 95       	ret

000003b6 <__umulhisi3>:
 3b6:	a2 9f       	mul	r26, r18
 3b8:	b0 01       	movw	r22, r0
 3ba:	b3 9f       	mul	r27, r19
 3bc:	c0 01       	movw	r24, r0
 3be:	a3 9f       	mul	r26, r19
 3c0:	01 d0       	rcall	.+2      	; 0x3c4 <__umulhisi3+0xe>
 3c2:	b2 9f       	mul	r27, r18
 3c4:	70 0d       	add	r23, r0
 3c6:	81 1d       	adc	r24, r1
 3c8:	11 24       	eor	r1, r1
 3ca:	91 1d       	adc	r25, r1
 3cc:	08 95       	ret

000003ce <__udivmodsi4>:
 3ce:	a1 e2       	ldi	r26, 0x21	; 33
 3d0:	1a 2e       	mov	r1, r26
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	fd 01       	movw	r30, r26
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <__udivmodsi4_ep>

000003da <__udivmodsi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	ee 1f       	adc	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	a2 17       	cp	r26, r18
 3e4:	b3 07       	cpc	r27, r19
 3e6:	e4 07       	cpc	r30, r20
 3e8:	f5 07       	cpc	r31, r21
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__udivmodsi4_ep>
 3ec:	a2 1b       	sub	r26, r18
 3ee:	b3 0b       	sbc	r27, r19
 3f0:	e4 0b       	sbc	r30, r20
 3f2:	f5 0b       	sbc	r31, r21

000003f4 <__udivmodsi4_ep>:
 3f4:	66 1f       	adc	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	1a 94       	dec	r1
 3fe:	69 f7       	brne	.-38     	; 0x3da <__udivmodsi4_loop>
 400:	60 95       	com	r22
 402:	70 95       	com	r23
 404:	80 95       	com	r24
 406:	90 95       	com	r25
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	bd 01       	movw	r22, r26
 40e:	cf 01       	movw	r24, r30
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
