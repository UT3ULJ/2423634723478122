
timer indikator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  0000049c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000710  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b4  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b0  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000297  00000000  00000000  000019be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	5a c0       	rjmp	.+180    	; 0xc2 <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	22 c0       	rjmp	.+68     	; 0x6c <segchar+0x10>
  28:	23 c0       	rjmp	.+70     	; 0x70 <segchar+0x14>
  2a:	25 c0       	rjmp	.+74     	; 0x76 <segchar+0x1a>
  2c:	27 c0       	rjmp	.+78     	; 0x7c <segchar+0x20>
  2e:	29 c0       	rjmp	.+82     	; 0x82 <segchar+0x26>
  30:	2b c0       	rjmp	.+86     	; 0x88 <segchar+0x2c>
  32:	2d c0       	rjmp	.+90     	; 0x8e <segchar+0x32>
  34:	2f c0       	rjmp	.+94     	; 0x94 <segchar+0x38>
  36:	31 c0       	rjmp	.+98     	; 0x9a <segchar+0x3e>
  38:	33 c0       	rjmp	.+102    	; 0xa0 <segchar+0x44>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a9 36       	cpi	r26, 0x69	; 105
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	5d d1       	rcall	.+698    	; 0x312 <main>
  58:	e5 c1       	rjmp	.+970    	; 0x424 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <segchar>:
unsigned char R1=0, R2=0, R3=0, R4=0, R5=0, R6=0;
//-----------------------------------------//

void segchar (unsigned char seg)
{
	switch(seg)
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	91 05       	cpc	r25, r1
  62:	00 f5       	brcc	.+64     	; 0xa4 <segchar+0x48>
  64:	fc 01       	movw	r30, r24
  66:	ed 5e       	subi	r30, 0xED	; 237
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	09 94       	ijmp
	{
		
		case 0: PORTD = Zero; break;
  6c:	12 ba       	out	0x12, r1	; 18
  6e:	08 95       	ret
		case 1: PORTD = One; break;
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	82 bb       	out	0x12, r24	; 18
  74:	08 95       	ret
		case 2: PORTD = Two; break;
  76:	82 e0       	ldi	r24, 0x02	; 2
  78:	82 bb       	out	0x12, r24	; 18
  7a:	08 95       	ret
		case 3: PORTD = Three; break;
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	82 bb       	out	0x12, r24	; 18
  80:	08 95       	ret
		case 4: PORTD = Four; break;
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	82 bb       	out	0x12, r24	; 18
  86:	08 95       	ret
		case 5: PORTD = Five; break;
  88:	85 e0       	ldi	r24, 0x05	; 5
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	08 95       	ret
		case 6: PORTD = Six; break;
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	82 bb       	out	0x12, r24	; 18
  92:	08 95       	ret
		case 7: PORTD = Seven; break;
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	82 bb       	out	0x12, r24	; 18
  98:	08 95       	ret
		case 8: PORTD = Eight; break;
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	08 95       	ret
		case 9: PORTD = Nine; break;
  a0:	89 e0       	ldi	r24, 0x09	; 9
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	08 95       	ret

000000a6 <timer_ini>:
//-----------------------------------------//

void timer_ini(void) 
	{
	
	TCCR1B |= (1<<WGM12);        // Установка режима СТС - сброс по совпадению
  a6:	8e b5       	in	r24, 0x2e	; 46
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);          // Установка бита прерывания 1 счетчика по свопадению с OCR1A (H L)
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	89 bf       	out	0x39, r24	; 57
	//0000111101000010
	//111001001101111000
	OCR1AH = 0b00001111;       // - старшие биты - Записываем число для сравнения 16 бит + нижняя строчка
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b01000010;       // - младшие биты - F_CPU/256=3906 , в бинарном формате - 00001111-01000010    11110100 0010010
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS10);              //  Устанавливаем делитель 256    - 1 000 000 / 3906 = 256
  ba:	8e b5       	in	r24, 0x2e	; 46
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8e bd       	out	0x2e, r24	; 46
  c0:	08 95       	ret

000000c2 <__vector_6>:


//-----------------------------------------//

ISR (TIMER1_COMPA_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB|=(1<<PORTB1); segchar(R1);}
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e8:	81 11       	cpse	r24, r1
  ea:	16 c0       	rjmp	.+44     	; 0x118 <__vector_6+0x56>
  ec:	a8 98       	cbi	0x15, 0	; 21
  ee:	a9 98       	cbi	0x15, 1	; 21
  f0:	aa 98       	cbi	0x15, 2	; 21
  f2:	ab 98       	cbi	0x15, 3	; 21
  f4:	c0 98       	cbi	0x18, 0	; 24
  f6:	c1 9a       	sbi	0x18, 1	; 24
  f8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <R1>
  fc:	af df       	rcall	.-162    	; 0x5c <segchar>
	if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB1);PORTB|=(1<<PORTB0); segchar(R2);}
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 102:	81 11       	cpse	r24, r1
 104:	09 c0       	rjmp	.+18     	; 0x118 <__vector_6+0x56>
 106:	a8 98       	cbi	0x15, 0	; 21
 108:	a9 98       	cbi	0x15, 1	; 21
 10a:	aa 98       	cbi	0x15, 2	; 21
 10c:	ab 98       	cbi	0x15, 3	; 21
 10e:	c1 98       	cbi	0x18, 1	; 24
 110:	c0 9a       	sbi	0x18, 0	; 24
 112:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <R2>
 116:	a2 df       	rcall	.-188    	; 0x5c <segchar>
	if (n_count==1) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC3); segchar(R3);}
 118:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	49 f4       	brne	.+18     	; 0x132 <__vector_6+0x70>
 120:	a8 98       	cbi	0x15, 0	; 21
 122:	a9 98       	cbi	0x15, 1	; 21
 124:	aa 98       	cbi	0x15, 2	; 21
 126:	c0 98       	cbi	0x18, 0	; 24
 128:	c1 98       	cbi	0x18, 1	; 24
 12a:	ab 9a       	sbi	0x15, 3	; 21
 12c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <R3>
 130:	95 df       	rcall	.-214    	; 0x5c <segchar>
	if (n_count==2)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC2); segchar(R4);}
 132:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	49 f4       	brne	.+18     	; 0x14c <__vector_6+0x8a>
 13a:	a8 98       	cbi	0x15, 0	; 21
 13c:	a9 98       	cbi	0x15, 1	; 21
 13e:	ab 98       	cbi	0x15, 3	; 21
 140:	c0 98       	cbi	0x18, 0	; 24
 142:	c1 98       	cbi	0x18, 1	; 24
 144:	aa 9a       	sbi	0x15, 2	; 21
 146:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <R4>
 14a:	88 df       	rcall	.-240    	; 0x5c <segchar>
	if (n_count==3)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC1); segchar(R5);}
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	49 f4       	brne	.+18     	; 0x166 <__vector_6+0xa4>
 154:	a8 98       	cbi	0x15, 0	; 21
 156:	aa 98       	cbi	0x15, 2	; 21
 158:	ab 98       	cbi	0x15, 3	; 21
 15a:	c0 98       	cbi	0x18, 0	; 24
 15c:	c1 98       	cbi	0x18, 1	; 24
 15e:	a9 9a       	sbi	0x15, 1	; 21
 160:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <R5>
 164:	7b df       	rcall	.-266    	; 0x5c <segchar>
	if (n_count==4)	{PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC0); segchar(R6);}
 166:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	49 f4       	brne	.+18     	; 0x180 <__vector_6+0xbe>
 16e:	a9 98       	cbi	0x15, 1	; 21
 170:	aa 98       	cbi	0x15, 2	; 21
 172:	ab 98       	cbi	0x15, 3	; 21
 174:	c0 98       	cbi	0x18, 0	; 24
 176:	c1 98       	cbi	0x18, 1	; 24
 178:	a8 9a       	sbi	0x15, 0	; 21
 17a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <R6>
 17e:	6e df       	rcall	.-292    	; 0x5c <segchar>
	n_count++;
 180:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 184:	8f 5f       	subi	r24, 0xFF	; 255
	if (n_count>5) n_count=0;
 186:	86 30       	cpi	r24, 0x06	; 6
 188:	18 f4       	brcc	.+6      	; 0x190 <__vector_6+0xce>
	if (n_count==0) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB1);PORTB|=(1<<PORTB0); segchar(R2);}
	if (n_count==1) {PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC3); segchar(R3);}
	if (n_count==2)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC2); segchar(R4);}
	if (n_count==3)	{PORTC&=~(1<<PORTC0);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC1); segchar(R5);}
	if (n_count==4)	{PORTC&=~(1<<PORTC1);PORTC&=~(1<<PORTC2);PORTC&=~(1<<PORTC3);PORTB&=~(1<<PORTB0);PORTB&=~(1<<PORTB1);PORTC|=(1<<PORTC0); segchar(R6);}
	n_count++;
 18a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__vector_6+0xd2>
	if (n_count>5) n_count=0;
 190:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	7f 91       	pop	r23
 1a2:	6f 91       	pop	r22
 1a4:	5f 91       	pop	r21
 1a6:	4f 91       	pop	r20
 1a8:	3f 91       	pop	r19
 1aa:	2f 91       	pop	r18
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <ledprint>:

//-----------------------------------------//

void ledprint(unsigned int number)
{
 1b6:	ac 01       	movw	r20, r24
	R1 = number%10;
 1b8:	9c 01       	movw	r18, r24
 1ba:	ad ec       	ldi	r26, 0xCD	; 205
 1bc:	bc ec       	ldi	r27, 0xCC	; 204
 1be:	04 d1       	rcall	.+520    	; 0x3c8 <__umulhisi3>
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	96 95       	lsr	r25
 1c6:	87 95       	ror	r24
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	9c 01       	movw	r18, r24
 1ce:	22 0f       	add	r18, r18
 1d0:	33 1f       	adc	r19, r19
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	82 0f       	add	r24, r18
 1e0:	93 1f       	adc	r25, r19
 1e2:	9a 01       	movw	r18, r20
 1e4:	28 1b       	sub	r18, r24
 1e6:	39 0b       	sbc	r19, r25
 1e8:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <R1>
	R2 = number%100/10;
 1ec:	9a 01       	movw	r18, r20
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	ab e7       	ldi	r26, 0x7B	; 123
 1f8:	b4 e1       	ldi	r27, 0x14	; 20
 1fa:	e6 d0       	rcall	.+460    	; 0x3c8 <__umulhisi3>
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	64 e6       	ldi	r22, 0x64	; 100
 202:	68 9f       	mul	r22, r24
 204:	90 01       	movw	r18, r0
 206:	69 9f       	mul	r22, r25
 208:	30 0d       	add	r19, r0
 20a:	11 24       	eor	r1, r1
 20c:	ca 01       	movw	r24, r20
 20e:	82 1b       	sub	r24, r18
 210:	93 0b       	sbc	r25, r19
 212:	9c 01       	movw	r18, r24
 214:	ad ec       	ldi	r26, 0xCD	; 205
 216:	bc ec       	ldi	r27, 0xCC	; 204
 218:	d7 d0       	rcall	.+430    	; 0x3c8 <__umulhisi3>
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <R2>
	R3 = number%1000/100;
 22a:	9a 01       	movw	r18, r20
 22c:	36 95       	lsr	r19
 22e:	27 95       	ror	r18
 230:	36 95       	lsr	r19
 232:	27 95       	ror	r18
 234:	36 95       	lsr	r19
 236:	27 95       	ror	r18
 238:	a5 ec       	ldi	r26, 0xC5	; 197
 23a:	b0 e2       	ldi	r27, 0x20	; 32
 23c:	c5 d0       	rcall	.+394    	; 0x3c8 <__umulhisi3>
 23e:	92 95       	swap	r25
 240:	82 95       	swap	r24
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	89 27       	eor	r24, r25
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	89 27       	eor	r24, r25
 24a:	68 ee       	ldi	r22, 0xE8	; 232
 24c:	73 e0       	ldi	r23, 0x03	; 3
 24e:	86 9f       	mul	r24, r22
 250:	90 01       	movw	r18, r0
 252:	87 9f       	mul	r24, r23
 254:	30 0d       	add	r19, r0
 256:	96 9f       	mul	r25, r22
 258:	30 0d       	add	r19, r0
 25a:	11 24       	eor	r1, r1
 25c:	ca 01       	movw	r24, r20
 25e:	82 1b       	sub	r24, r18
 260:	93 0b       	sbc	r25, r19
 262:	9c 01       	movw	r18, r24
 264:	36 95       	lsr	r19
 266:	27 95       	ror	r18
 268:	36 95       	lsr	r19
 26a:	27 95       	ror	r18
 26c:	ab e7       	ldi	r26, 0x7B	; 123
 26e:	b4 e1       	ldi	r27, 0x14	; 20
 270:	ab d0       	rcall	.+342    	; 0x3c8 <__umulhisi3>
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <R3>
	R4 = number%10000/1000;
 27a:	9a 01       	movw	r18, r20
 27c:	32 95       	swap	r19
 27e:	22 95       	swap	r18
 280:	2f 70       	andi	r18, 0x0F	; 15
 282:	23 27       	eor	r18, r19
 284:	3f 70       	andi	r19, 0x0F	; 15
 286:	23 27       	eor	r18, r19
 288:	a7 e4       	ldi	r26, 0x47	; 71
 28a:	b3 e0       	ldi	r27, 0x03	; 3
 28c:	9d d0       	rcall	.+314    	; 0x3c8 <__umulhisi3>
 28e:	fc 01       	movw	r30, r24
 290:	f6 95       	lsr	r31
 292:	e7 95       	ror	r30
 294:	f6 95       	lsr	r31
 296:	e7 95       	ror	r30
 298:	f6 95       	lsr	r31
 29a:	e7 95       	ror	r30
 29c:	20 e1       	ldi	r18, 0x10	; 16
 29e:	37 e2       	ldi	r19, 0x27	; 39
 2a0:	e2 9f       	mul	r30, r18
 2a2:	c0 01       	movw	r24, r0
 2a4:	e3 9f       	mul	r30, r19
 2a6:	90 0d       	add	r25, r0
 2a8:	f2 9f       	mul	r31, r18
 2aa:	90 0d       	add	r25, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	fa 01       	movw	r30, r20
 2b0:	e8 1b       	sub	r30, r24
 2b2:	f9 0b       	sbc	r31, r25
 2b4:	9f 01       	movw	r18, r30
 2b6:	36 95       	lsr	r19
 2b8:	27 95       	ror	r18
 2ba:	36 95       	lsr	r19
 2bc:	27 95       	ror	r18
 2be:	36 95       	lsr	r19
 2c0:	27 95       	ror	r18
 2c2:	a5 ec       	ldi	r26, 0xC5	; 197
 2c4:	b0 e2       	ldi	r27, 0x20	; 32
 2c6:	80 d0       	rcall	.+256    	; 0x3c8 <__umulhisi3>
 2c8:	92 95       	swap	r25
 2ca:	82 95       	swap	r24
 2cc:	8f 70       	andi	r24, 0x0F	; 15
 2ce:	89 27       	eor	r24, r25
 2d0:	9f 70       	andi	r25, 0x0F	; 15
 2d2:	89 27       	eor	r24, r25
 2d4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <R4>
	R5 = number%10000/10000;
 2d8:	9f 01       	movw	r18, r30
 2da:	32 95       	swap	r19
 2dc:	22 95       	swap	r18
 2de:	2f 70       	andi	r18, 0x0F	; 15
 2e0:	23 27       	eor	r18, r19
 2e2:	3f 70       	andi	r19, 0x0F	; 15
 2e4:	23 27       	eor	r18, r19
 2e6:	a7 e4       	ldi	r26, 0x47	; 71
 2e8:	b3 e0       	ldi	r27, 0x03	; 3
 2ea:	6e d0       	rcall	.+220    	; 0x3c8 <__umulhisi3>
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <R5>
	R6 = number/100000;
 2fc:	ba 01       	movw	r22, r20
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	20 ea       	ldi	r18, 0xA0	; 160
 304:	36 e8       	ldi	r19, 0x86	; 134
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	42 d0       	rcall	.+132    	; 0x390 <__divmodsi4>
 30c:	20 93 61 00 	sts	0x0061, r18	; 0x800061 <R6>
 310:	08 95       	ret

00000312 <main>:
{

	
	unsigned char buttondeb=0, butstatus=0;
	
	timer_ini(); 
 312:	c9 de       	rcall	.-622    	; 0xa6 <timer_ini>
	
	DDRD=0xFF;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	81 bb       	out	0x11, r24	; 17
	DDRB=0b00001111;
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	87 bb       	out	0x17, r24	; 23
	DDRC=0b10011111;
 31c:	9f e9       	ldi	r25, 0x9F	; 159
 31e:	94 bb       	out	0x14, r25	; 20
	PORTD=0b00000000;
 320:	12 ba       	out	0x12, r1	; 18
	PORTB=0b01001111;
 322:	9f e4       	ldi	r25, 0x4F	; 79
 324:	98 bb       	out	0x18, r25	; 24
	PORTC=0b00001111;
 326:	85 bb       	out	0x15, r24	; 21
	i=0;
 328:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i+0x1>
 32c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i>
	sei();
 330:	78 94       	sei

int main(void)
{

	
	unsigned char buttondeb=0, butstatus=0;
 332:	c0 e0       	ldi	r28, 0x00	; 0
	i=0;
	sei();
	
	while (1)
	{
		for (i=0;i<10000;i++)
 334:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i+0x1>
 338:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i>
		{
			while (butstatus==0)
			{
				
						if (!(PINB&0b01000000))
 33c:	b6 99       	sbic	0x16, 6	; 22
 33e:	09 c0       	rjmp	.+18     	; 0x352 <main+0x40>
						{
							if (buttondeb<5)
 340:	c5 30       	cpi	r28, 0x05	; 5
 342:	10 f4       	brcc	.+4      	; 0x348 <main+0x36>
							{
								buttondeb++;
 344:	cf 5f       	subi	r28, 0xFF	; 255
 346:	fa cf       	rjmp	.-12     	; 0x33c <main+0x2a>
							}
							else
							{
								
								i=0;
 348:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <i+0x1>
 34c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i>
 350:	04 c0       	rjmp	.+8      	; 0x35a <main+0x48>
							}
							
						}
						else
						{
							if (buttondeb>0)
 352:	cc 23       	and	r28, r28
 354:	11 f0       	breq	.+4      	; 0x35a <main+0x48>
							{
								buttondeb--;
 356:	c1 50       	subi	r28, 0x01	; 1
 358:	f1 cf       	rjmp	.-30     	; 0x33c <main+0x2a>
								
							}
						}
				
			}
			ledprint(i);
 35a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <i>
 35e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <i+0x1>
 362:	29 df       	rcall	.-430    	; 0x1b6 <ledprint>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	2f e3       	ldi	r18, 0x3F	; 63
 366:	8d e0       	ldi	r24, 0x0D	; 13
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	21 50       	subi	r18, 0x01	; 1
 36c:	80 40       	sbci	r24, 0x00	; 0
 36e:	90 40       	sbci	r25, 0x00	; 0
 370:	e1 f7       	brne	.-8      	; 0x36a <main+0x58>
 372:	00 c0       	rjmp	.+0      	; 0x374 <main+0x62>
 374:	00 00       	nop
	i=0;
	sei();
	
	while (1)
	{
		for (i=0;i<10000;i++)
 376:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <i>
 37a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <i+0x1>
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <i+0x1>
 384:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <i>
 388:	80 31       	cpi	r24, 0x10	; 16
 38a:	97 42       	sbci	r25, 0x27	; 39
 38c:	b8 f2       	brcs	.-82     	; 0x33c <main+0x2a>
 38e:	d2 cf       	rjmp	.-92     	; 0x334 <main+0x22>

00000390 <__divmodsi4>:
 390:	05 2e       	mov	r0, r21
 392:	97 fb       	bst	r25, 7
 394:	16 f4       	brtc	.+4      	; 0x39a <__divmodsi4+0xa>
 396:	00 94       	com	r0
 398:	0f d0       	rcall	.+30     	; 0x3b8 <__negsi2>
 39a:	57 fd       	sbrc	r21, 7
 39c:	05 d0       	rcall	.+10     	; 0x3a8 <__divmodsi4_neg2>
 39e:	20 d0       	rcall	.+64     	; 0x3e0 <__udivmodsi4>
 3a0:	07 fc       	sbrc	r0, 7
 3a2:	02 d0       	rcall	.+4      	; 0x3a8 <__divmodsi4_neg2>
 3a4:	46 f4       	brtc	.+16     	; 0x3b6 <__divmodsi4_exit>
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <__negsi2>

000003a8 <__divmodsi4_neg2>:
 3a8:	50 95       	com	r21
 3aa:	40 95       	com	r20
 3ac:	30 95       	com	r19
 3ae:	21 95       	neg	r18
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	4f 4f       	sbci	r20, 0xFF	; 255
 3b4:	5f 4f       	sbci	r21, 0xFF	; 255

000003b6 <__divmodsi4_exit>:
 3b6:	08 95       	ret

000003b8 <__negsi2>:
 3b8:	90 95       	com	r25
 3ba:	80 95       	com	r24
 3bc:	70 95       	com	r23
 3be:	61 95       	neg	r22
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	08 95       	ret

000003c8 <__umulhisi3>:
 3c8:	a2 9f       	mul	r26, r18
 3ca:	b0 01       	movw	r22, r0
 3cc:	b3 9f       	mul	r27, r19
 3ce:	c0 01       	movw	r24, r0
 3d0:	a3 9f       	mul	r26, r19
 3d2:	01 d0       	rcall	.+2      	; 0x3d6 <__umulhisi3+0xe>
 3d4:	b2 9f       	mul	r27, r18
 3d6:	70 0d       	add	r23, r0
 3d8:	81 1d       	adc	r24, r1
 3da:	11 24       	eor	r1, r1
 3dc:	91 1d       	adc	r25, r1
 3de:	08 95       	ret

000003e0 <__udivmodsi4>:
 3e0:	a1 e2       	ldi	r26, 0x21	; 33
 3e2:	1a 2e       	mov	r1, r26
 3e4:	aa 1b       	sub	r26, r26
 3e6:	bb 1b       	sub	r27, r27
 3e8:	fd 01       	movw	r30, r26
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__udivmodsi4_ep>

000003ec <__udivmodsi4_loop>:
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	ee 1f       	adc	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	a2 17       	cp	r26, r18
 3f6:	b3 07       	cpc	r27, r19
 3f8:	e4 07       	cpc	r30, r20
 3fa:	f5 07       	cpc	r31, r21
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__udivmodsi4_ep>
 3fe:	a2 1b       	sub	r26, r18
 400:	b3 0b       	sbc	r27, r19
 402:	e4 0b       	sbc	r30, r20
 404:	f5 0b       	sbc	r31, r21

00000406 <__udivmodsi4_ep>:
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	1a 94       	dec	r1
 410:	69 f7       	brne	.-38     	; 0x3ec <__udivmodsi4_loop>
 412:	60 95       	com	r22
 414:	70 95       	com	r23
 416:	80 95       	com	r24
 418:	90 95       	com	r25
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	bd 01       	movw	r22, r26
 420:	cf 01       	movw	r24, r30
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
